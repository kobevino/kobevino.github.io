3:I[6731,[],""]
5:I[2923,[],""]
6:I[5403,["2","static/chunks/2-ad9c083589494568.js","332","static/chunks/332-a212bd7f004a89bf.js","34","static/chunks/34-00f8cbeb68282840.js","185","static/chunks/app/layout-37c356eeb03ff880.js"],"ColorSchemeScript"]
7:I[9420,["2","static/chunks/2-ad9c083589494568.js","332","static/chunks/332-a212bd7f004a89bf.js","34","static/chunks/34-00f8cbeb68282840.js","185","static/chunks/app/layout-37c356eeb03ff880.js"],"MantineProvider"]
8:I[7513,["2","static/chunks/2-ad9c083589494568.js","332","static/chunks/332-a212bd7f004a89bf.js","34","static/chunks/34-00f8cbeb68282840.js","185","static/chunks/app/layout-37c356eeb03ff880.js"],"Header"]
9:I[863,["2","static/chunks/2-ad9c083589494568.js","332","static/chunks/332-a212bd7f004a89bf.js","34","static/chunks/34-00f8cbeb68282840.js","185","static/chunks/app/layout-37c356eeb03ff880.js"],"Container"]
b:I[7792,["2","static/chunks/2-ad9c083589494568.js","42","static/chunks/app/%5Bslug%5D/page-cdea868390d0022c.js"],"Title"]
c:I[8002,["2","static/chunks/2-ad9c083589494568.js","42","static/chunks/app/%5Bslug%5D/page-cdea868390d0022c.js"],"Text"]
4:["slug","avoid-anti-pattern","d"]
a:T53f,M62.6 142c-2.133 0-3.2-1.067-3.2-3.2V118h-56c-2 0-3-1-3-3V92.8c0-1.333.4-2.733 1.2-4.2L58.2 4c.8-1.333 2.067-2 3.8-2h28c2 0 3 1 3 3v85.4h11.2c.933 0 1.733.333 2.4 1 .667.533 1 1.267 1 2.2v21.2c0 .933-.333 1.733-1 2.4-.667.533-1.467.8-2.4.8H93v20.8c0 2.133-1.067 3.2-3.2 3.2H62.6zM33 90.4h26.4V51.2L33 90.4zM181.67 144.6c-7.333 0-14.333-1.333-21-4-6.666-2.667-12.866-6.733-18.6-12.2-5.733-5.467-10.266-13-13.6-22.6-3.333-9.6-5-20.667-5-33.2 0-12.533 1.667-23.6 5-33.2 3.334-9.6 7.867-17.133 13.6-22.6 5.734-5.467 11.934-9.533 18.6-12.2 6.667-2.8 13.667-4.2 21-4.2 7.467 0 14.534 1.4 21.2 4.2 6.667 2.667 12.8 6.733 18.4 12.2 5.734 5.467 10.267 13 13.6 22.6 3.334 9.6 5 20.667 5 33.2 0 12.533-1.666 23.6-5 33.2-3.333 9.6-7.866 17.133-13.6 22.6-5.6 5.467-11.733 9.533-18.4 12.2-6.666 2.667-13.733 4-21.2 4zm0-31c9.067 0 15.6-3.733 19.6-11.2 4.134-7.6 6.2-17.533 6.2-29.8s-2.066-22.2-6.2-29.8c-4.133-7.6-10.666-11.4-19.6-11.4-8.933 0-15.466 3.8-19.6 11.4-4 7.6-6 17.533-6 29.8s2 22.2 6 29.8c4.134 7.467 10.667 11.2 19.6 11.2zM316.116 142c-2.134 0-3.2-1.067-3.2-3.2V118h-56c-2 0-3-1-3-3V92.8c0-1.333.4-2.733 1.2-4.2l56.6-84.6c.8-1.333 2.066-2 3.8-2h28c2 0 3 1 3 3v85.4h11.2c.933 0 1.733.333 2.4 1 .666.533 1 1.267 1 2.2v21.2c0 .933-.334 1.733-1 2.4-.667.533-1.467.8-2.4.8h-11.2v20.8c0 2.133-1.067 3.2-3.2 3.2h-27.2zm-29.6-51.6h26.4V51.2l-26.4 39.2z0:["LV2OZufGfTxcDymUJqdCW",[[["",{"children":[["slug","avoid-anti-pattern","d"],{"children":["__PAGE__?{\"slug\":\"avoid-anti-pattern\"}",{}]}]},"$undefined","$undefined",true],["",{"children":[["slug","avoid-anti-pattern","d"],{"children":["__PAGE__",{},[["$L1","$L2"],null],null]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","$4","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":[["$","link","0",{"rel":"stylesheet","href":"./_next/static/css/4c62bdaf9ccfa79d.css","precedence":"next","crossOrigin":"$undefined"}]]}],null]},[["$","html",null,{"lang":"en","children":[["$","head",null,{"children":["$","$L6",null,{"defaultColorScheme":"auto"}]}],["$","body",null,{"children":["$","$L7",null,{"theme":{"cursorType":"pointer"},"defaultColorScheme":"auto","children":[["$","$L8",null,{}],["$","$L9",null,{"children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","$L9",null,{"className":"not-found_root___8tHH","children":["$","div",null,{"className":"not-found_inner__jk2We","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","viewBox":"0 0 362 145","className":"not-found_image__klXiS","children":[["$","title",null,{"children":"404"}],["$","path",null,{"fill":"currentColor","d":"$a"}]]}],["$","div",null,{"className":"not-found_content__cklTM","children":[["$","$Lb",null,{"className":"not-found_title__bOfUG","children":"Nothing to see here"}],["$","$Lc",null,{"c":"dimmed","size":"lg","ta":"center","className":"not-found_description__7RPJl","children":"Page you are trying to open does not exist. You may have mistyped the address, or the page has been moved to another URL. If you think this is an error contact support."}]]}]]}]}],"notFoundStyles":[["$","link","0",{"rel":"stylesheet","href":"./_next/static/css/9b82fbf9d3dab81a.css","precedence":"next","crossOrigin":"$undefined"}]],"styles":null}]}]]}]}]]}],null],null],[[["$","link","0",{"rel":"stylesheet","href":"./_next/static/css/dbb50fd420b33798.css","precedence":"next","crossOrigin":"$undefined"}],["$","link","1",{"rel":"stylesheet","href":"./_next/static/css/456480efaa4d0c44.css","precedence":"next","crossOrigin":"$undefined"}]],[null,"$Ld"]]]]]
d:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"Kobe's Blog"}],["$","meta","3",{"name":"description","content":"Generated by Jaesung Lee"}],["$","link","4",{"rel":"icon","href":"/favicon.ico"}]]
1:null
e:I[5287,["2","static/chunks/2-ad9c083589494568.js","42","static/chunks/app/%5Bslug%5D/page-cdea868390d0022c.js"],"Stack"]
f:I[9231,["2","static/chunks/2-ad9c083589494568.js","42","static/chunks/app/%5Bslug%5D/page-cdea868390d0022c.js"],"Group"]
11:I[3179,["2","static/chunks/2-ad9c083589494568.js","42","static/chunks/app/%5Bslug%5D/page-cdea868390d0022c.js"],"Comments"]
10:T1279d,<p>I've been working as a frontend engineer for about 10 years. I think I need to share my experience, which is related to code, with others. Even though everything I share with is not good answers, I hope it should be useful for frontend engineers.</p>
<h2>Get value as number from a number input</h2>
<figure data-rehype-pretty-code-figure=""><pre style="background-color:#282A36;color:#F8F8F2" tabindex="0" data-language="jsx" data-theme="dracula"><code data-language="jsx" data-theme="dracula" style="display: grid;"><span data-line=""><span style="color:#FF79C6">function</span><span style="color:#50FA7B"> App</span><span style="color:#F8F8F2">() {</span></span>
<span data-line=""><span style="color:#FF79C6">  const</span><span style="color:#50FA7B"> onChange</span><span style="color:#FF79C6"> =</span><span style="color:#F8F8F2"> (</span><span style="color:#FFB86C;font-style:italic">event</span><span style="color:#F8F8F2">) </span><span style="color:#FF79C6">=></span><span style="color:#F8F8F2"> {</span></span>
<span data-line=""><span style="color:#FF79C6">    const</span><span style="color:#F8F8F2"> { value, </span><mark data-highlighted-chars="" data-chars-id="green"><span style="color:#F8F8F2">valueAsNumber</span></mark><span style="color:#F8F8F2"> } </span><span style="color:#FF79C6">=</span><span style="color:#F8F8F2"> event.target</span></span>
<span data-line=""><span style="color:#F8F8F2">    console.</span><span style="color:#50FA7B">log</span><span style="color:#F8F8F2">(</span><span style="color:#50FA7B">ParseInt</span><span style="color:#F8F8F2">(value)) </span><span style="color:#6272A4">//  ❌ Bad</span></span>
<span data-line=""><span style="color:#F8F8F2">    console.</span><span style="color:#50FA7B">log</span><span style="color:#F8F8F2">(</span><mark data-highlighted-chars="" data-chars-id="green"><span style="color:#F8F8F2">valueAsNumber</span></mark><span style="color:#F8F8F2">) </span><span style="color:#6272A4">// ✅ Good</span></span>
<span data-line=""><span style="color:#F8F8F2">  }</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#FF79C6">  return</span><span style="color:#F8F8F2"> (</span></span>
<span data-line=""><span style="color:#F8F8F2">    &#x3C;</span><span style="color:#FF79C6">div</span><span style="color:#F8F8F2">></span></span>
<span data-line=""><span style="color:#F8F8F2">      &#x3C;</span><span style="color:#FF79C6">input</span><span style="color:#50FA7B;font-style:italic"> type</span><span style="color:#FF79C6">=</span><span style="color:#E9F284">"</span><span style="color:#F1FA8C">number</span><span style="color:#E9F284">"</span><span style="color:#50FA7B;font-style:italic"> onChange</span><span style="color:#FF79C6">={</span><span style="color:#F8F8F2">onChange</span><span style="color:#FF79C6">}</span><span style="color:#F8F8F2"> /></span></span>
<span data-line=""><span style="color:#F8F8F2">    &#x3C;/</span><span style="color:#FF79C6">div</span><span style="color:#F8F8F2">></span></span>
<span data-line=""><span style="color:#F8F8F2">  )</span></span>
<span data-line=""><span style="color:#F8F8F2">}</span></span><button type="button" title="Copy code" aria-label="Copy code" data="function App() {
  const onChange = (event) => {
    const { value, valueAsNumber } = event.target
    console.log(ParseInt(value)) //  ❌ Bad
    console.log(valueAsNumber) // ✅ Good
  }

  return (
    <div>
      <input type=&#x22;number&#x22; onChange={onChange} />
    </div>
  )
}" class="rehype-pretty-copy" onclick="navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);window.setTimeout(() => this.classList.remove(&#x27;rehype-pretty-copied&#x27;), 3000);"><span class="ready"></span><span class="success"></span></button><style>:root {--copy-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 48 48'%3E%3Cpath fill='%23adadad' d='M16.187 9.5H12.25a1.75 1.75 0 0 0-1.75 1.75v28.5c0 .967.784 1.75 1.75 1.75h23.5a1.75 1.75 0 0 0 1.75-1.75v-28.5a1.75 1.75 0 0 0-1.75-1.75h-3.937a4.25 4.25 0 0 1-4.063 3h-7.5a4.25 4.25 0 0 1-4.063-3M31.813 7h3.937A4.25 4.25 0 0 1 40 11.25v28.5A4.25 4.25 0 0 1 35.75 44h-23.5A4.25 4.25 0 0 1 8 39.75v-28.5A4.25 4.25 0 0 1 12.25 7h3.937a4.25 4.25 0 0 1 4.063-3h7.5a4.25 4.25 0 0 1 4.063 3M18.5 8.25c0 .966.784 1.75 1.75 1.75h7.5a1.75 1.75 0 1 0 0-3.5h-7.5a1.75 1.75 0 0 0-1.75 1.75'/%3E%3C/svg%3E");--success-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='%2366ff85' d='M9 16.17L5.53 12.7a.996.996 0 1 0-1.41 1.41l4.18 4.18c.39.39 1.02.39 1.41 0L20.29 7.71a.996.996 0 1 0-1.41-1.41z'/%3E%3C/svg%3E");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {right: 1px;padding: 0;width: 24px;height: 24px;display: flex;margin-top: 2px;margin-right: 8px;position: absolute;border-radius: 25%;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></pre></figure>
<p>You can simply get the value as a number without tranforming it.</p>
<h2>Add names to your useEffects in React</h2>
<figure data-rehype-pretty-code-figure=""><pre style="background-color:#282A36;color:#F8F8F2" tabindex="0" data-language="jsx" data-theme="dracula"><code data-language="jsx" data-theme="dracula" style="display: grid;"><span data-line=""><span style="color:#FF79C6">function</span><span style="color:#50FA7B"> App</span><span style="color:#F8F8F2">() {</span></span>
<span data-line=""><span style="color:#6272A4">  // ❌ Bad</span></span>
<span data-line="" data-highlighted-line=""><span style="color:#50FA7B">  useEffect</span><span style="color:#F8F8F2">(() </span><span style="color:#FF79C6">=></span><span style="color:#F8F8F2"> {</span></span>
<span data-line="" data-highlighted-line=""><span style="color:#6272A4">    // Do something complicated logic</span></span>
<span data-line="" data-highlighted-line=""><span style="color:#F8F8F2">  }, [])</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#6272A4">  // ✅ Good</span></span>
<span data-line=""><span style="color:#FF79C6">  const</span><span style="color:#F8F8F2"> configEffect </span><span style="color:#FF79C6">=</span><span style="color:#50FA7B"> useCallback</span><span style="color:#F8F8F2">(() </span><span style="color:#FF79C6">=></span><span style="color:#F8F8F2"> {</span></span>
<span data-line=""><span style="color:#6272A4">    // Do something logic</span></span>
<span data-line=""><span style="color:#F8F8F2">  }, [])</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#FF79C6">  const</span><span style="color:#F8F8F2"> anotherEffect </span><span style="color:#FF79C6">=</span><span style="color:#50FA7B"> useCallback</span><span style="color:#F8F8F2">(() </span><span style="color:#FF79C6">=></span><span style="color:#F8F8F2"> {</span></span>
<span data-line=""><span style="color:#6272A4">    // Do something logic</span></span>
<span data-line=""><span style="color:#F8F8F2">  }, []) </span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#50FA7B">  useEffect</span><span style="color:#F8F8F2">(configEffect, [configEffect])</span></span>
<span data-line=""><span style="color:#50FA7B">  useEffect</span><span style="color:#F8F8F2">(anotherEffect, [anotherEffect])</span></span>
<span data-line=""><span style="color:#F8F8F2">}</span></span><button type="button" title="Copy code" aria-label="Copy code" data="function App() {
  // ❌ Bad
  useEffect(() => {
    // Do something complicated logic
  }, [])

  // ✅ Good
  const configEffect = useCallback(() => {
    // Do something logic
  }, [])

  const anotherEffect = useCallback(() => {
    // Do something logic
  }, []) 

  useEffect(configEffect, [configEffect])
  useEffect(anotherEffect, [anotherEffect])
}" class="rehype-pretty-copy" onclick="navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);window.setTimeout(() => this.classList.remove(&#x27;rehype-pretty-copied&#x27;), 3000);"><span class="ready"></span><span class="success"></span></button><style>:root {--copy-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 48 48'%3E%3Cpath fill='%23adadad' d='M16.187 9.5H12.25a1.75 1.75 0 0 0-1.75 1.75v28.5c0 .967.784 1.75 1.75 1.75h23.5a1.75 1.75 0 0 0 1.75-1.75v-28.5a1.75 1.75 0 0 0-1.75-1.75h-3.937a4.25 4.25 0 0 1-4.063 3h-7.5a4.25 4.25 0 0 1-4.063-3M31.813 7h3.937A4.25 4.25 0 0 1 40 11.25v28.5A4.25 4.25 0 0 1 35.75 44h-23.5A4.25 4.25 0 0 1 8 39.75v-28.5A4.25 4.25 0 0 1 12.25 7h3.937a4.25 4.25 0 0 1 4.063-3h7.5a4.25 4.25 0 0 1 4.063 3M18.5 8.25c0 .966.784 1.75 1.75 1.75h7.5a1.75 1.75 0 1 0 0-3.5h-7.5a1.75 1.75 0 0 0-1.75 1.75'/%3E%3C/svg%3E");--success-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='%2366ff85' d='M9 16.17L5.53 12.7a.996.996 0 1 0-1.41 1.41l4.18 4.18c.39.39 1.02.39 1.41 0L20.29 7.71a.996.996 0 1 0-1.41-1.41z'/%3E%3C/svg%3E");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {right: 1px;padding: 0;width: 24px;height: 24px;display: flex;margin-top: 2px;margin-right: 8px;position: absolute;border-radius: 25%;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></pre></figure>
<p>I used to write <strong>anonymous functions</strong> when creating <code>useEffects</code>. However It took a little bit long time to understand what is going on. We need to deep-dive inside the code. So I strongly recommend it should be <em>give it a name</em> with <code>useCallback</code> that maintain its behaviour. As a result, code readability is improved.</p>
<h2>Use numeric separators to keep large numbers readable</h2>
<figure data-rehype-pretty-code-figure=""><pre style="background-color:#282A36;color:#F8F8F2" tabindex="0" data-language="js" data-theme="dracula"><code data-language="js" data-theme="dracula" style="display: grid;"><span data-line=""><span style="color:#FF79C6">const</span><span style="color:#F8F8F2"> bigNumber </span><span style="color:#FF79C6">=</span><span style="color:#BD93F9"> 123948012394812</span><span style="color:#6272A4"> // ❌ Bad</span></span>
<span data-line="" data-highlighted-line=""><span style="color:#FF79C6">const</span><span style="color:#F8F8F2"> bigNumber </span><span style="color:#FF79C6">=</span><span style="color:#BD93F9"> 123_948_012_394_812</span><span style="color:#6272A4"> // ✅ Good</span></span><button type="button" title="Copy code" aria-label="Copy code" data="const bigNumber = 123948012394812 // ❌ Bad
const bigNumber = 123_948_012_394_812 // ✅ Good" class="rehype-pretty-copy" onclick="navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);window.setTimeout(() => this.classList.remove(&#x27;rehype-pretty-copied&#x27;), 3000);"><span class="ready"></span><span class="success"></span></button><style>:root {--copy-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 48 48'%3E%3Cpath fill='%23adadad' d='M16.187 9.5H12.25a1.75 1.75 0 0 0-1.75 1.75v28.5c0 .967.784 1.75 1.75 1.75h23.5a1.75 1.75 0 0 0 1.75-1.75v-28.5a1.75 1.75 0 0 0-1.75-1.75h-3.937a4.25 4.25 0 0 1-4.063 3h-7.5a4.25 4.25 0 0 1-4.063-3M31.813 7h3.937A4.25 4.25 0 0 1 40 11.25v28.5A4.25 4.25 0 0 1 35.75 44h-23.5A4.25 4.25 0 0 1 8 39.75v-28.5A4.25 4.25 0 0 1 12.25 7h3.937a4.25 4.25 0 0 1 4.063-3h7.5a4.25 4.25 0 0 1 4.063 3M18.5 8.25c0 .966.784 1.75 1.75 1.75h7.5a1.75 1.75 0 1 0 0-3.5h-7.5a1.75 1.75 0 0 0-1.75 1.75'/%3E%3C/svg%3E");--success-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='%2366ff85' d='M9 16.17L5.53 12.7a.996.996 0 1 0-1.41 1.41l4.18 4.18c.39.39 1.02.39 1.41 0L20.29 7.71a.996.996 0 1 0-1.41-1.41z'/%3E%3C/svg%3E");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {right: 1px;padding: 0;width: 24px;height: 24px;display: flex;margin-top: 2px;margin-right: 8px;position: absolute;border-radius: 25%;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></pre></figure>
<p>It's easy to make sense of large numbers with <code>_</code>.</p>
<h2>:is() selector tip</h2>
<figure data-rehype-pretty-code-figure=""><pre style="background-color:#282A36;color:#F8F8F2" tabindex="0" data-language="css" data-theme="dracula"><code data-language="css" data-theme="dracula" style="display: grid;"><span data-line=""><span style="color:#FF79C6">header p</span><span style="color:#F8F8F2">,</span><span style="color:#FF79C6"> header h2</span><span style="color:#F8F8F2">,</span><span style="color:#FF79C6"> header button</span><span style="color:#F8F8F2"> { </span><span style="color:#6272A4">/* ❌ Bad */</span></span>
<span data-line=""><span style="color:#8BE9FD">  color</span><span style="color:#FF79C6">:</span><span style="color:#BD93F9"> red</span><span style="color:#F8F8F2">;</span></span>
<span data-line=""><span style="color:#F8F8F2">}</span></span>
<span data-line=""> </span>
<span data-line="" data-highlighted-line=""><span style="color:#FF79C6">header </span><span style="color:#FF79C6;font-style:italic">:</span><span style="color:#50FA7B;font-style:italic">is</span><span style="color:#FF79C6">(p</span><span style="color:#F8F8F2">,</span><span style="color:#FF79C6"> h2</span><span style="color:#F8F8F2">,</span><span style="color:#FF79C6"> button)</span><span style="color:#F8F8F2"> { </span><span style="color:#6272A4">/* ✅ Good */</span></span>
<span data-line=""><span style="color:#8BE9FD">  color</span><span style="color:#FF79C6">:</span><span style="color:#BD93F9"> red</span><span style="color:#F8F8F2">;</span></span>
<span data-line=""><span style="color:#F8F8F2">}</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#FF79C6">header p</span><span style="color:#F8F8F2">,</span><span style="color:#FF79C6"> footer p</span><span style="color:#F8F8F2">,</span><span style="color:#FF79C6"> section p</span><span style="color:#F8F8F2"> { </span><span style="color:#6272A4">/* ❌ Bad */</span></span>
<span data-line=""><span style="color:#8BE9FD">  color</span><span style="color:#FF79C6">:</span><span style="color:#BD93F9"> red</span><span style="color:#F8F8F2">;</span></span>
<span data-line=""><span style="color:#F8F8F2">}</span></span>
<span data-line=""> </span>
<span data-line="" data-highlighted-line=""><span style="color:#FF79C6;font-style:italic">:</span><span style="color:#50FA7B;font-style:italic">is</span><span style="color:#FF79C6">(header</span><span style="color:#F8F8F2">,</span><span style="color:#FF79C6"> footer</span><span style="color:#F8F8F2">,</span><span style="color:#FF79C6"> section) p</span><span style="color:#F8F8F2"> { </span><span style="color:#6272A4">/* ✅ Good */</span></span>
<span data-line=""><span style="color:#8BE9FD">  color</span><span style="color:#FF79C6">:</span><span style="color:#BD93F9"> red</span><span style="color:#F8F8F2">;</span></span>
<span data-line=""><span style="color:#F8F8F2">}</span></span><button type="button" title="Copy code" aria-label="Copy code" data="header p, header h2, header button { /* ❌ Bad */
  color: red;
}

header :is(p, h2, button) { /* ✅ Good */
  color: red;
}

header p, footer p, section p { /* ❌ Bad */
  color: red;
}

:is(header, footer, section) p { /* ✅ Good */
  color: red;
}" class="rehype-pretty-copy" onclick="navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);window.setTimeout(() => this.classList.remove(&#x27;rehype-pretty-copied&#x27;), 3000);"><span class="ready"></span><span class="success"></span></button><style>:root {--copy-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 48 48'%3E%3Cpath fill='%23adadad' d='M16.187 9.5H12.25a1.75 1.75 0 0 0-1.75 1.75v28.5c0 .967.784 1.75 1.75 1.75h23.5a1.75 1.75 0 0 0 1.75-1.75v-28.5a1.75 1.75 0 0 0-1.75-1.75h-3.937a4.25 4.25 0 0 1-4.063 3h-7.5a4.25 4.25 0 0 1-4.063-3M31.813 7h3.937A4.25 4.25 0 0 1 40 11.25v28.5A4.25 4.25 0 0 1 35.75 44h-23.5A4.25 4.25 0 0 1 8 39.75v-28.5A4.25 4.25 0 0 1 12.25 7h3.937a4.25 4.25 0 0 1 4.063-3h7.5a4.25 4.25 0 0 1 4.063 3M18.5 8.25c0 .966.784 1.75 1.75 1.75h7.5a1.75 1.75 0 1 0 0-3.5h-7.5a1.75 1.75 0 0 0-1.75 1.75'/%3E%3C/svg%3E");--success-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='%2366ff85' d='M9 16.17L5.53 12.7a.996.996 0 1 0-1.41 1.41l4.18 4.18c.39.39 1.02.39 1.41 0L20.29 7.71a.996.996 0 1 0-1.41-1.41z'/%3E%3C/svg%3E");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {right: 1px;padding: 0;width: 24px;height: 24px;display: flex;margin-top: 2px;margin-right: 8px;position: absolute;border-radius: 25%;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></pre></figure>
<p><code>:is</code> selector helps to make shorter and more readable code.</p>
<h2>Dealing with union types</h2>
<figure data-rehype-pretty-code-figure=""><pre style="background-color:#282A36;color:#F8F8F2" tabindex="0" data-language="ts" data-theme="dracula"><code data-language="ts" data-theme="dracula" style="display: grid;"><span data-line=""><span style="color:#FF79C6">type</span><span style="color:#8BE9FD;font-style:italic"> Profile</span><span style="color:#FF79C6"> =</span><span style="color:#F8F8F2"> {</span></span>
<span data-line=""><span style="color:#F8F8F2">  age</span><span style="color:#FF79C6">:</span><span style="color:#8BE9FD;font-style:italic"> number</span><span style="color:#F8F8F2">;</span></span>
<span data-line=""><span style="color:#F8F8F2">}</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#FF79C6">type</span><span style="color:#8BE9FD;font-style:italic"> Information</span><span style="color:#FF79C6"> =</span><span style="color:#F8F8F2"> {</span></span>
<span data-line=""><span style="color:#F8F8F2">  male</span><span style="color:#FF79C6">:</span><span style="color:#8BE9FD;font-style:italic"> boolean</span><span style="color:#F8F8F2">;</span></span>
<span data-line=""><span style="color:#F8F8F2">}</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#FF79C6">function</span><span style="color:#50FA7B"> getLog</span><span style="color:#F8F8F2">(</span><span style="color:#FFB86C;font-style:italic">user</span><span style="color:#FF79C6">:</span><span style="color:#8BE9FD;font-style:italic"> Profile</span><span style="color:#FF79C6"> |</span><span style="color:#8BE9FD;font-style:italic"> Information</span><span style="color:#F8F8F2">) {</span></span>
<span data-line=""><span style="color:#FF79C6">  if</span><span style="color:#F8F8F2"> (user.age) { </span><span style="color:#6272A4">// ❌ Bad</span></span>
<span data-line=""><span style="color:#F8F8F2">  }</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#FF79C6">  if</span><span style="color:#F8F8F2"> (</span><span style="color:#E9F284">'</span><span style="color:#F1FA8C">age</span><span style="color:#E9F284">'</span><span style="color:#FF79C6"> in</span><span style="color:#F8F8F2"> user) { </span><span style="color:#6272A4">// ✅ Good</span></span>
<span data-line=""><span style="color:#F8F8F2">    console.</span><span style="color:#50FA7B">log</span><span style="color:#F8F8F2">(user.age)</span></span>
<span data-line=""><span style="color:#F8F8F2">  }</span></span>
<span data-line=""><span style="color:#F8F8F2">}</span></span><button type="button" title="Copy code" aria-label="Copy code" data="type Profile = {
  age: number;
}

type Information = {
  male: boolean;
}

function getLog(user: Profile | Information) {
  if (user.age) { // ❌ Bad
  }

  if (&#x27;age&#x27; in user) { // ✅ Good
    console.log(user.age)
  }
}" class="rehype-pretty-copy" onclick="navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);window.setTimeout(() => this.classList.remove(&#x27;rehype-pretty-copied&#x27;), 3000);"><span class="ready"></span><span class="success"></span></button><style>:root {--copy-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 48 48'%3E%3Cpath fill='%23adadad' d='M16.187 9.5H12.25a1.75 1.75 0 0 0-1.75 1.75v28.5c0 .967.784 1.75 1.75 1.75h23.5a1.75 1.75 0 0 0 1.75-1.75v-28.5a1.75 1.75 0 0 0-1.75-1.75h-3.937a4.25 4.25 0 0 1-4.063 3h-7.5a4.25 4.25 0 0 1-4.063-3M31.813 7h3.937A4.25 4.25 0 0 1 40 11.25v28.5A4.25 4.25 0 0 1 35.75 44h-23.5A4.25 4.25 0 0 1 8 39.75v-28.5A4.25 4.25 0 0 1 12.25 7h3.937a4.25 4.25 0 0 1 4.063-3h7.5a4.25 4.25 0 0 1 4.063 3M18.5 8.25c0 .966.784 1.75 1.75 1.75h7.5a1.75 1.75 0 1 0 0-3.5h-7.5a1.75 1.75 0 0 0-1.75 1.75'/%3E%3C/svg%3E");--success-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='%2366ff85' d='M9 16.17L5.53 12.7a.996.996 0 1 0-1.41 1.41l4.18 4.18c.39.39 1.02.39 1.41 0L20.29 7.71a.996.996 0 1 0-1.41-1.41z'/%3E%3C/svg%3E");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {right: 1px;padding: 0;width: 24px;height: 24px;display: flex;margin-top: 2px;margin-right: 8px;position: absolute;border-radius: 25%;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></pre></figure>
<p><strong>Union type</strong> is powerful tool, but they can cause some errors. Be careful of union types that have no properties in common.</p>
<h2>Define a component</h2>
<figure data-rehype-pretty-code-figure=""><pre style="background-color:#282A36;color:#F8F8F2" tabindex="0" data-language="jsx" data-theme="dracula"><code data-language="jsx" data-theme="dracula" style="display: grid;"><span data-line=""><span style="color:#6272A4">// ❌ Bad</span></span>
<span data-line=""><span style="color:#FF79C6">function</span><span style="color:#50FA7B"> ParentComponent</span><span style="color:#F8F8F2">() {</span></span>
<span data-line=""><span style="color:#FF79C6">  function</span><span style="color:#50FA7B"> ChildComponent</span><span style="color:#F8F8F2">() {</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#F8F8F2">  }</span></span>
<span data-line=""><span style="color:#FF79C6">  return</span><span style="color:#F8F8F2"> &#x3C;</span><span style="color:#FF79C6">div</span><span style="color:#F8F8F2">>&#x3C;</span><span style="color:#8BE9FD;font-style:italic">ChildComponent</span><span style="color:#F8F8F2"> />&#x3C;/</span><span style="color:#FF79C6">div</span><span style="color:#F8F8F2">></span></span>
<span data-line=""><span style="color:#F8F8F2">}</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#6272A4">// ✅ Good</span></span>
<span data-line=""><span style="color:#FF79C6">function</span><span style="color:#50FA7B"> ChildComponent</span><span style="color:#F8F8F2">() {</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#F8F8F2">}</span></span>
<span data-line=""><span style="color:#FF79C6">function</span><span style="color:#50FA7B"> ParentComponent</span><span style="color:#F8F8F2">() {</span></span>
<span data-line=""><span style="color:#FF79C6">  return</span><span style="color:#F8F8F2"> &#x3C;</span><span style="color:#FF79C6">div</span><span style="color:#F8F8F2">>&#x3C;</span><span style="color:#8BE9FD;font-style:italic">ChildComponent</span><span style="color:#F8F8F2"> />&#x3C;/</span><span style="color:#FF79C6">div</span><span style="color:#F8F8F2">></span></span>
<span data-line=""><span style="color:#F8F8F2">}</span></span><button type="button" title="Copy code" aria-label="Copy code" data="// ❌ Bad
function ParentComponent() {
  function ChildComponent() {

  }
  return <div><ChildComponent /></div>
}

// ✅ Good
function ChildComponent() {

}
function ParentComponent() {
  return <div><ChildComponent /></div>
}" class="rehype-pretty-copy" onclick="navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);window.setTimeout(() => this.classList.remove(&#x27;rehype-pretty-copied&#x27;), 3000);"><span class="ready"></span><span class="success"></span></button><style>:root {--copy-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 48 48'%3E%3Cpath fill='%23adadad' d='M16.187 9.5H12.25a1.75 1.75 0 0 0-1.75 1.75v28.5c0 .967.784 1.75 1.75 1.75h23.5a1.75 1.75 0 0 0 1.75-1.75v-28.5a1.75 1.75 0 0 0-1.75-1.75h-3.937a4.25 4.25 0 0 1-4.063 3h-7.5a4.25 4.25 0 0 1-4.063-3M31.813 7h3.937A4.25 4.25 0 0 1 40 11.25v28.5A4.25 4.25 0 0 1 35.75 44h-23.5A4.25 4.25 0 0 1 8 39.75v-28.5A4.25 4.25 0 0 1 12.25 7h3.937a4.25 4.25 0 0 1 4.063-3h7.5a4.25 4.25 0 0 1 4.063 3M18.5 8.25c0 .966.784 1.75 1.75 1.75h7.5a1.75 1.75 0 1 0 0-3.5h-7.5a1.75 1.75 0 0 0-1.75 1.75'/%3E%3C/svg%3E");--success-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='%2366ff85' d='M9 16.17L5.53 12.7a.996.996 0 1 0-1.41 1.41l4.18 4.18c.39.39 1.02.39 1.41 0L20.29 7.71a.996.996 0 1 0-1.41-1.41z'/%3E%3C/svg%3E");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {right: 1px;padding: 0;width: 24px;height: 24px;display: flex;margin-top: 2px;margin-right: 8px;position: absolute;border-radius: 25%;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></pre></figure>
<p>Although it's convenient to define a component inside another component, We don't have to define it like this pattern. Because it may cause performance issue. <strong>So define it at the top level of the file or module.</strong></p>
<h2>Avoid provider wrapping hell</h2>
<figure data-rehype-pretty-code-figure=""><pre style="background-color:#282A36;color:#F8F8F2" tabindex="0" data-language="jsx" data-theme="dracula"><code data-language="jsx" data-theme="dracula" style="display: grid;"><span data-line=""><span style="color:#6272A4">// ❌ Bad</span></span>
<span data-line=""><span style="color:#FF79C6">const</span><span style="color:#F8F8F2"> root </span><span style="color:#FF79C6">=</span><span style="color:#50FA7B"> createRoot</span><span style="color:#F8F8F2">(document.</span><span style="color:#50FA7B">getElementById</span><span style="color:#F8F8F2">(</span><span style="color:#E9F284">'</span><span style="color:#F1FA8C">root</span><span style="color:#E9F284">'</span><span style="color:#F8F8F2">))</span></span>
<span data-line=""><span style="color:#F8F8F2">root.</span><span style="color:#50FA7B">render</span><span style="color:#F8F8F2">(</span></span>
<span data-line=""><span style="color:#F8F8F2">  &#x3C;</span><span style="color:#8BE9FD;font-style:italic">ThemeContext.Provider</span><span style="color:#F8F8F2">></span></span>
<span data-line=""><span style="color:#F8F8F2">    &#x3C;</span><span style="color:#8BE9FD;font-style:italic">UserContext.Provider</span><span style="color:#F8F8F2">></span></span>
<span data-line=""><span style="color:#F8F8F2">      &#x3C;</span><span style="color:#8BE9FD;font-style:italic">QueryClientProvider</span><span style="color:#50FA7B;font-style:italic"> client</span><span style="color:#FF79C6">={</span><span style="color:#F8F8F2">queryClient</span><span style="color:#FF79C6">}</span><span style="color:#F8F8F2">></span></span>
<span data-line=""><span style="color:#F8F8F2">        &#x3C;</span><span style="color:#8BE9FD;font-style:italic">Provider</span><span style="color:#50FA7B;font-style:italic"> store</span><span style="color:#FF79C6">={</span><span style="color:#F8F8F2">store</span><span style="color:#FF79C6">}</span><span style="color:#F8F8F2">></span></span>
<span data-line=""><span style="color:#F8F8F2">          &#x3C;</span><span style="color:#8BE9FD;font-style:italic">IntlProvider</span><span style="color:#50FA7B;font-style:italic"> locale</span><span style="color:#FF79C6">={</span><span style="color:#F8F8F2">usersLocale</span><span style="color:#FF79C6">}</span><span style="color:#F8F8F2">></span></span>
<span data-line=""><span style="color:#F8F8F2">            &#x3C;</span><span style="color:#8BE9FD;font-style:italic">App</span><span style="color:#F8F8F2"> /></span></span>
<span data-line=""><span style="color:#F8F8F2">          &#x3C;/</span><span style="color:#8BE9FD;font-style:italic">IntlProvider</span><span style="color:#F8F8F2">></span></span>
<span data-line=""><span style="color:#F8F8F2">        &#x3C;/</span><span style="color:#8BE9FD;font-style:italic">Provider</span><span style="color:#F8F8F2">></span></span>
<span data-line=""><span style="color:#F8F8F2">      &#x3C;/</span><span style="color:#8BE9FD;font-style:italic">QueryClientProvider</span><span style="color:#F8F8F2">></span></span>
<span data-line=""><span style="color:#F8F8F2">    &#x3C;/</span><span style="color:#8BE9FD;font-style:italic">UserContext.Provider</span><span style="color:#F8F8F2">></span></span>
<span data-line=""><span style="color:#F8F8F2">  &#x3C;/</span><span style="color:#8BE9FD;font-style:italic">ThemeContext.Provider</span><span style="color:#F8F8F2">></span></span>
<span data-line=""><span style="color:#F8F8F2">)</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#6272A4">// ✅ Good</span></span>
<span data-line="" data-highlighted-line=""><span style="color:#FF79C6">const</span><span style="color:#50FA7B"> buildProvidersTree</span><span style="color:#FF79C6"> =</span><span style="color:#F8F8F2"> (</span><span style="color:#FFB86C;font-style:italic">componentsWithProps</span><span style="color:#F8F8F2">) </span><span style="color:#FF79C6">=></span><span style="color:#F8F8F2"> {</span></span>
<span data-line="" data-highlighted-line=""><span style="color:#FF79C6">  const</span><span style="color:#50FA7B"> initialComponent</span><span style="color:#FF79C6"> =</span><span style="color:#F8F8F2"> ({ </span><span style="color:#FFB86C;font-style:italic">children</span><span style="color:#F8F8F2"> }) </span><span style="color:#FF79C6">=></span><span style="color:#F8F8F2"> &#x3C;></span><span style="color:#FF79C6">{</span><span style="color:#F8F8F2">children</span><span style="color:#FF79C6">}</span><span style="color:#F8F8F2">&#x3C;/></span></span>
<span data-line="" data-highlighted-line=""><span style="color:#FF79C6">  return</span><span style="color:#F8F8F2"> componentsWithProps.</span><span style="color:#50FA7B">reduce</span><span style="color:#F8F8F2">(</span></span>
<span data-line="" data-highlighted-line=""><span style="color:#F8F8F2">    (</span><span style="color:#FFB86C;font-style:italic">AccumulatedComponents</span><span style="color:#F8F8F2">, [</span><span style="color:#FFB86C;font-style:italic">Provider</span><span style="color:#F8F8F2">, </span><span style="color:#FFB86C;font-style:italic">props</span><span style="color:#FF79C6"> =</span><span style="color:#F8F8F2"> {}]) </span><span style="color:#FF79C6">=></span><span style="color:#F8F8F2"> {</span></span>
<span data-line="" data-highlighted-line=""><span style="color:#FF79C6">      return</span><span style="color:#F8F8F2"> ({ </span><span style="color:#FFB86C;font-style:italic">children</span><span style="color:#F8F8F2"> }) </span><span style="color:#FF79C6">=></span><span style="color:#F8F8F2"> {</span></span>
<span data-line="" data-highlighted-line=""><span style="color:#FF79C6">        return</span><span style="color:#F8F8F2"> (</span></span>
<span data-line="" data-highlighted-line=""><span style="color:#F8F8F2">          &#x3C;</span><span style="color:#8BE9FD;font-style:italic">AccumulatedComponents</span><span style="color:#F8F8F2">></span></span>
<span data-line="" data-highlighted-line=""><span style="color:#F8F8F2">            &#x3C;</span><span style="color:#8BE9FD;font-style:italic">Provider</span><span style="color:#FF79C6"> {...</span><span style="color:#F8F8F2">props</span><span style="color:#FF79C6">}</span><span style="color:#F8F8F2">></span><span style="color:#FF79C6">{</span><span style="color:#F8F8F2">children</span><span style="color:#FF79C6">}</span><span style="color:#F8F8F2">&#x3C;/</span><span style="color:#8BE9FD;font-style:italic">Provider</span><span style="color:#F8F8F2">></span></span>
<span data-line="" data-highlighted-line=""><span style="color:#F8F8F2">          &#x3C;/</span><span style="color:#8BE9FD;font-style:italic">AccumulatedComponents</span><span style="color:#F8F8F2">></span></span>
<span data-line="" data-highlighted-line=""><span style="color:#F8F8F2">        )</span></span>
<span data-line="" data-highlighted-line=""><span style="color:#F8F8F2">      }</span></span>
<span data-line="" data-highlighted-line=""><span style="color:#F8F8F2">    },</span></span>
<span data-line="" data-highlighted-line=""><span style="color:#F8F8F2">    initialComponent</span></span>
<span data-line="" data-highlighted-line=""><span style="color:#F8F8F2">  )</span></span>
<span data-line="" data-highlighted-line=""><span style="color:#F8F8F2">}</span></span>
<span data-line=""><span style="color:#FF79C6">const</span><span style="color:#F8F8F2"> ProvidersTree </span><span style="color:#FF79C6">=</span><span style="color:#50FA7B"> buildProvidersTree</span><span style="color:#F8F8F2">([</span></span>
<span data-line=""><span style="color:#F8F8F2">  [ThemeContext.Provider],</span></span>
<span data-line=""><span style="color:#F8F8F2">  [UserContext.Provider],</span></span>
<span data-line=""><span style="color:#F8F8F2">  [QueryClientProvider, { client</span><span style="color:#FF79C6">:</span><span style="color:#F8F8F2"> queryClient }],</span></span>
<span data-line=""><span style="color:#F8F8F2">  [ReduxProvider, { store }]</span></span>
<span data-line=""><span style="color:#F8F8F2">  [IntlProvider, { locale</span><span style="color:#FF79C6">:</span><span style="color:#F8F8F2"> usersLocale }]</span></span>
<span data-line=""><span style="color:#F8F8F2">])</span></span>
<span data-line=""><span style="color:#FF79C6">const</span><span style="color:#F8F8F2"> root </span><span style="color:#FF79C6">=</span><span style="color:#50FA7B"> createRoot</span><span style="color:#F8F8F2">(document.</span><span style="color:#50FA7B">getElementById</span><span style="color:#F8F8F2">(</span><span style="color:#E9F284">'</span><span style="color:#F1FA8C">root</span><span style="color:#E9F284">'</span><span style="color:#F8F8F2">))</span></span>
<span data-line=""><span style="color:#F8F8F2">root.</span><span style="color:#50FA7B">render</span><span style="color:#F8F8F2">(</span></span>
<span data-line=""><span style="color:#F8F8F2">  &#x3C;</span><span style="color:#8BE9FD;font-style:italic">ProvidersTree</span><span style="color:#F8F8F2">></span></span>
<span data-line=""><span style="color:#F8F8F2">    &#x3C;</span><span style="color:#8BE9FD;font-style:italic">App</span><span style="color:#F8F8F2"> /></span></span>
<span data-line=""><span style="color:#F8F8F2">  &#x3C;/</span><span style="color:#8BE9FD;font-style:italic">ProvidersTree</span><span style="color:#F8F8F2">></span></span>
<span data-line=""><span style="color:#F8F8F2">)</span></span><button type="button" title="Copy code" aria-label="Copy code" data="// ❌ Bad
const root = createRoot(document.getElementById(&#x27;root&#x27;))
root.render(
  <ThemeContext.Provider>
    <UserContext.Provider>
      <QueryClientProvider client={queryClient}>
        <Provider store={store}>
          <IntlProvider locale={usersLocale}>
            <App />
          </IntlProvider>
        </Provider>
      </QueryClientProvider>
    </UserContext.Provider>
  </ThemeContext.Provider>
)

// ✅ Good
const buildProvidersTree = (componentsWithProps) => {
  const initialComponent = ({ children }) => <>{children}</>
  return componentsWithProps.reduce(
    (AccumulatedComponents, [Provider, props = {}]) => {
      return ({ children }) => {
        return (
          <AccumulatedComponents>
            <Provider {...props}>{children}</Provider>
          </AccumulatedComponents>
        )
      }
    },
    initialComponent
  )
}
const ProvidersTree = buildProvidersTree([
  [ThemeContext.Provider],
  [UserContext.Provider],
  [QueryClientProvider, { client: queryClient }],
  [ReduxProvider, { store }]
  [IntlProvider, { locale: usersLocale }]
])
const root = createRoot(document.getElementById(&#x27;root&#x27;))
root.render(
  <ProvidersTree>
    <App />
  </ProvidersTree>
)" class="rehype-pretty-copy" onclick="navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);window.setTimeout(() => this.classList.remove(&#x27;rehype-pretty-copied&#x27;), 3000);"><span class="ready"></span><span class="success"></span></button><style>:root {--copy-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 48 48'%3E%3Cpath fill='%23adadad' d='M16.187 9.5H12.25a1.75 1.75 0 0 0-1.75 1.75v28.5c0 .967.784 1.75 1.75 1.75h23.5a1.75 1.75 0 0 0 1.75-1.75v-28.5a1.75 1.75 0 0 0-1.75-1.75h-3.937a4.25 4.25 0 0 1-4.063 3h-7.5a4.25 4.25 0 0 1-4.063-3M31.813 7h3.937A4.25 4.25 0 0 1 40 11.25v28.5A4.25 4.25 0 0 1 35.75 44h-23.5A4.25 4.25 0 0 1 8 39.75v-28.5A4.25 4.25 0 0 1 12.25 7h3.937a4.25 4.25 0 0 1 4.063-3h7.5a4.25 4.25 0 0 1 4.063 3M18.5 8.25c0 .966.784 1.75 1.75 1.75h7.5a1.75 1.75 0 1 0 0-3.5h-7.5a1.75 1.75 0 0 0-1.75 1.75'/%3E%3C/svg%3E");--success-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='%2366ff85' d='M9 16.17L5.53 12.7a.996.996 0 1 0-1.41 1.41l4.18 4.18c.39.39 1.02.39 1.41 0L20.29 7.71a.996.996 0 1 0-1.41-1.41z'/%3E%3C/svg%3E");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {right: 1px;padding: 0;width: 24px;height: 24px;display: flex;margin-top: 2px;margin-right: 8px;position: absolute;border-radius: 25%;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></pre></figure>
<p>Provider wrapping hell is uncomfortable to read code. Instead, using composition for all providers makes the code easier to work with and more comfortable for everyone.</p>
<h2>Destructure from property that might be undefined</h2>
<figure data-rehype-pretty-code-figure=""><pre style="background-color:#282A36;color:#F8F8F2" tabindex="0" data-language="ts" data-theme="dracula"><code data-language="ts" data-theme="dracula" style="display: grid;"><span data-line=""><span style="color:#FF79C6">const</span><span style="color:#F8F8F2"> user </span><span style="color:#FF79C6">=</span><span style="color:#F8F8F2"> {</span></span>
<span data-line=""><span style="color:#F8F8F2">  name</span><span style="color:#FF79C6">:</span><span style="color:#BD93F9"> undefined</span></span>
<span data-line=""><span style="color:#F8F8F2">}</span></span>
<span data-line=""><span style="color:#6272A4">// ❌ Bad</span></span>
<span data-line="" data-highlighted-line=""><span style="color:#FF79C6">const</span><span style="color:#F8F8F2"> { first, last } </span><span style="color:#FF79C6">=</span><span style="color:#F8F8F2"> user?.name</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#6272A4">// ✅ Good</span></span>
<span data-line=""><span style="color:#FF79C6">const</span><span style="color:#F8F8F2"> { first, last } </span><span style="color:#FF79C6">=</span><span style="color:#F8F8F2"> user?.name </span><mark data-highlighted-chars-mark="" data-highlighted-chars="" data-chars-id="green"><span style="color:#FF79C6">??</span><span style="color:#F8F8F2"> {}</span></mark></span><button type="button" title="Copy code" aria-label="Copy code" data="const user = {
  name: undefined
}
// ❌ Bad
const { first, last } = user?.name

// ✅ Good
const { first, last } = user?.name ?? {}" class="rehype-pretty-copy" onclick="navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);window.setTimeout(() => this.classList.remove(&#x27;rehype-pretty-copied&#x27;), 3000);"><span class="ready"></span><span class="success"></span></button><style>:root {--copy-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 48 48'%3E%3Cpath fill='%23adadad' d='M16.187 9.5H12.25a1.75 1.75 0 0 0-1.75 1.75v28.5c0 .967.784 1.75 1.75 1.75h23.5a1.75 1.75 0 0 0 1.75-1.75v-28.5a1.75 1.75 0 0 0-1.75-1.75h-3.937a4.25 4.25 0 0 1-4.063 3h-7.5a4.25 4.25 0 0 1-4.063-3M31.813 7h3.937A4.25 4.25 0 0 1 40 11.25v28.5A4.25 4.25 0 0 1 35.75 44h-23.5A4.25 4.25 0 0 1 8 39.75v-28.5A4.25 4.25 0 0 1 12.25 7h3.937a4.25 4.25 0 0 1 4.063-3h7.5a4.25 4.25 0 0 1 4.063 3M18.5 8.25c0 .966.784 1.75 1.75 1.75h7.5a1.75 1.75 0 1 0 0-3.5h-7.5a1.75 1.75 0 0 0-1.75 1.75'/%3E%3C/svg%3E");--success-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='%2366ff85' d='M9 16.17L5.53 12.7a.996.996 0 1 0-1.41 1.41l4.18 4.18c.39.39 1.02.39 1.41 0L20.29 7.71a.996.996 0 1 0-1.41-1.41z'/%3E%3C/svg%3E");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {right: 1px;padding: 0;width: 24px;height: 24px;display: flex;margin-top: 2px;margin-right: 8px;position: absolute;border-radius: 25%;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></pre></figure>
<p>Although we are using optional chaining, we receive a TypeError if name is undefined. Instead Use the <strong>nullish coalescing operator</strong> we can avoid the TypeError if name is undefined.</p>
<h2>Use Promise.all()</h2>
<figure data-rehype-pretty-code-figure=""><pre style="background-color:#282A36;color:#F8F8F2" tabindex="0" data-language="js" data-theme="dracula"><code data-language="js" data-theme="dracula" style="display: grid;"><span data-line=""><span style="color:#6272A4">// ❌ Bad</span></span>
<span data-line=""><span style="color:#FF79C6">const</span><span style="color:#F8F8F2"> user </span><span style="color:#FF79C6">=</span><span style="color:#FF79C6"> await</span><span style="color:#50FA7B"> getUser</span><span style="color:#F8F8F2">()</span></span>
<span data-line=""><span style="color:#FF79C6">const</span><span style="color:#F8F8F2"> products </span><span style="color:#FF79C6">=</span><span style="color:#FF79C6"> await</span><span style="color:#50FA7B"> getProducts</span><span style="color:#F8F8F2">()</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#6272A4">// ✅ Good</span></span>
<span data-line=""><span style="color:#FF79C6">const</span><span style="color:#F8F8F2"> [user, products] </span><span style="color:#FF79C6">=</span><span style="color:#FF79C6"> await</span><span style="color:#8BE9FD;font-style:italic"> Promise</span><span style="color:#F8F8F2">.</span><span style="color:#50FA7B">all</span><span style="color:#F8F8F2">([</span><span style="color:#50FA7B">getUser</span><span style="color:#F8F8F2">(), </span><span style="color:#50FA7B">getProducts</span><span style="color:#F8F8F2">()])</span></span><button type="button" title="Copy code" aria-label="Copy code" data="// ❌ Bad
const user = await getUser()
const products = await getProducts()

// ✅ Good
const [user, products] = await Promise.all([getUser(), getProducts()])" class="rehype-pretty-copy" onclick="navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);window.setTimeout(() => this.classList.remove(&#x27;rehype-pretty-copied&#x27;), 3000);"><span class="ready"></span><span class="success"></span></button><style>:root {--copy-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 48 48'%3E%3Cpath fill='%23adadad' d='M16.187 9.5H12.25a1.75 1.75 0 0 0-1.75 1.75v28.5c0 .967.784 1.75 1.75 1.75h23.5a1.75 1.75 0 0 0 1.75-1.75v-28.5a1.75 1.75 0 0 0-1.75-1.75h-3.937a4.25 4.25 0 0 1-4.063 3h-7.5a4.25 4.25 0 0 1-4.063-3M31.813 7h3.937A4.25 4.25 0 0 1 40 11.25v28.5A4.25 4.25 0 0 1 35.75 44h-23.5A4.25 4.25 0 0 1 8 39.75v-28.5A4.25 4.25 0 0 1 12.25 7h3.937a4.25 4.25 0 0 1 4.063-3h7.5a4.25 4.25 0 0 1 4.063 3M18.5 8.25c0 .966.784 1.75 1.75 1.75h7.5a1.75 1.75 0 1 0 0-3.5h-7.5a1.75 1.75 0 0 0-1.75 1.75'/%3E%3C/svg%3E");--success-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='%2366ff85' d='M9 16.17L5.53 12.7a.996.996 0 1 0-1.41 1.41l4.18 4.18c.39.39 1.02.39 1.41 0L20.29 7.71a.996.996 0 1 0-1.41-1.41z'/%3E%3C/svg%3E");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {right: 1px;padding: 0;width: 24px;height: 24px;display: flex;margin-top: 2px;margin-right: 8px;position: absolute;border-radius: 25%;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></pre></figure>
<p>This is up to twice as fast.</p>
<h2>Cloning objects in Javascript</h2>
<figure data-rehype-pretty-code-figure=""><pre style="background-color:#282A36;color:#F8F8F2" tabindex="0" data-language="js" data-theme="dracula"><code data-language="js" data-theme="dracula" style="display: grid;"><span data-line=""><span style="color:#FF79C6">const</span><span style="color:#F8F8F2"> obj </span><span style="color:#FF79C6">=</span><span style="color:#F8F8F2"> {</span></span>
<span data-line=""><span style="color:#F8F8F2">  name</span><span style="color:#FF79C6">:</span><span style="color:#F8F8F2"> {</span></span>
<span data-line=""><span style="color:#F8F8F2">    first</span><span style="color:#FF79C6">:</span><span style="color:#E9F284"> '</span><span style="color:#F1FA8C">Jaesung</span><span style="color:#E9F284">'</span><span style="color:#F8F8F2">,</span></span>
<span data-line=""><span style="color:#F8F8F2">    last</span><span style="color:#FF79C6">:</span><span style="color:#E9F284"> '</span><span style="color:#F1FA8C">Lee</span><span style="color:#E9F284">'</span></span>
<span data-line=""><span style="color:#F8F8F2">  }</span></span>
<span data-line=""><span style="color:#F8F8F2">}</span></span>
<span data-line=""><span style="color:#BD93F9">JSON</span><span style="color:#F8F8F2">.</span><span style="color:#50FA7B">parse</span><span style="color:#F8F8F2">(</span><span style="color:#BD93F9">JSON</span><span style="color:#F8F8F2">.</span><span style="color:#50FA7B">stringify</span><span style="color:#F8F8F2">(obj)) </span><span style="color:#6272A4">// ❌ Bad</span></span>
<span data-line=""><span style="color:#50FA7B">structuredClone</span><span style="color:#F8F8F2">(object) </span><span style="color:#6272A4">// ✅ Good</span></span><button type="button" title="Copy code" aria-label="Copy code" data="const obj = {
  name: {
    first: &#x27;Jaesung&#x27;,
    last: &#x27;Lee&#x27;
  }
}
JSON.parse(JSON.stringify(obj)) // ❌ Bad
structuredClone(object) // ✅ Good" class="rehype-pretty-copy" onclick="navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);window.setTimeout(() => this.classList.remove(&#x27;rehype-pretty-copied&#x27;), 3000);"><span class="ready"></span><span class="success"></span></button><style>:root {--copy-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 48 48'%3E%3Cpath fill='%23adadad' d='M16.187 9.5H12.25a1.75 1.75 0 0 0-1.75 1.75v28.5c0 .967.784 1.75 1.75 1.75h23.5a1.75 1.75 0 0 0 1.75-1.75v-28.5a1.75 1.75 0 0 0-1.75-1.75h-3.937a4.25 4.25 0 0 1-4.063 3h-7.5a4.25 4.25 0 0 1-4.063-3M31.813 7h3.937A4.25 4.25 0 0 1 40 11.25v28.5A4.25 4.25 0 0 1 35.75 44h-23.5A4.25 4.25 0 0 1 8 39.75v-28.5A4.25 4.25 0 0 1 12.25 7h3.937a4.25 4.25 0 0 1 4.063-3h7.5a4.25 4.25 0 0 1 4.063 3M18.5 8.25c0 .966.784 1.75 1.75 1.75h7.5a1.75 1.75 0 1 0 0-3.5h-7.5a1.75 1.75 0 0 0-1.75 1.75'/%3E%3C/svg%3E");--success-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='%2366ff85' d='M9 16.17L5.53 12.7a.996.996 0 1 0-1.41 1.41l4.18 4.18c.39.39 1.02.39 1.41 0L20.29 7.71a.996.996 0 1 0-1.41-1.41z'/%3E%3C/svg%3E");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {right: 1px;padding: 0;width: 24px;height: 24px;display: flex;margin-top: 2px;margin-right: 8px;position: absolute;border-radius: 25%;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></pre></figure>
<p>Javascript has a native support of deep clone. So we have to use <code>structuredClone</code>.</p>
<h2>Add to clipboard with a single line of code</h2>
<figure data-rehype-pretty-code-figure=""><pre style="background-color:#282A36;color:#F8F8F2" tabindex="0" data-language="js" data-theme="dracula"><code data-language="js" data-theme="dracula" style="display: grid;"><span data-line=""><span style="color:#F8F8F2">document.</span><span style="color:#50FA7B">execCommand</span><span style="color:#F8F8F2">(</span><span style="color:#E9F284">'</span><span style="color:#F1FA8C">copy</span><span style="color:#E9F284">'</span><span style="color:#F8F8F2">) </span><span style="color:#6272A4">// ❌ Bad</span></span>
<span data-line=""><span style="color:#F8F8F2">navigator.clipboard.</span><span style="color:#50FA7B">writeText</span><span style="color:#F8F8F2">(</span><span style="color:#E9F284">'</span><span style="color:#F1FA8C">npm i react</span><span style="color:#E9F284">'</span><span style="color:#F8F8F2">) </span><span style="color:#6272A4">// ✅ Good</span></span><button type="button" title="Copy code" aria-label="Copy code" data="document.execCommand(&#x27;copy&#x27;) // ❌ Bad
navigator.clipboard.writeText(&#x27;npm i react&#x27;) // ✅ Good" class="rehype-pretty-copy" onclick="navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);window.setTimeout(() => this.classList.remove(&#x27;rehype-pretty-copied&#x27;), 3000);"><span class="ready"></span><span class="success"></span></button><style>:root {--copy-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 48 48'%3E%3Cpath fill='%23adadad' d='M16.187 9.5H12.25a1.75 1.75 0 0 0-1.75 1.75v28.5c0 .967.784 1.75 1.75 1.75h23.5a1.75 1.75 0 0 0 1.75-1.75v-28.5a1.75 1.75 0 0 0-1.75-1.75h-3.937a4.25 4.25 0 0 1-4.063 3h-7.5a4.25 4.25 0 0 1-4.063-3M31.813 7h3.937A4.25 4.25 0 0 1 40 11.25v28.5A4.25 4.25 0 0 1 35.75 44h-23.5A4.25 4.25 0 0 1 8 39.75v-28.5A4.25 4.25 0 0 1 12.25 7h3.937a4.25 4.25 0 0 1 4.063-3h7.5a4.25 4.25 0 0 1 4.063 3M18.5 8.25c0 .966.784 1.75 1.75 1.75h7.5a1.75 1.75 0 1 0 0-3.5h-7.5a1.75 1.75 0 0 0-1.75 1.75'/%3E%3C/svg%3E");--success-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='%2366ff85' d='M9 16.17L5.53 12.7a.996.996 0 1 0-1.41 1.41l4.18 4.18c.39.39 1.02.39 1.41 0L20.29 7.71a.996.996 0 1 0-1.41-1.41z'/%3E%3C/svg%3E");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {right: 1px;padding: 0;width: 24px;height: 24px;display: flex;margin-top: 2px;margin-right: 8px;position: absolute;border-radius: 25%;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></pre></figure>
<p>No need to copy from the DOM anymore. You can use the <code>navigator.clipboard.writeText</code> function to copy text to clipboard.</p>
<h2>Conditional Rendering in React</h2>
<figure data-rehype-pretty-code-figure=""><pre style="background-color:#282A36;color:#F8F8F2" tabindex="0" data-language="jsx" data-theme="dracula"><code data-language="jsx" data-theme="dracula" style="display: grid;"><span data-line=""><span style="color:#6272A4">// ❌ Bad</span></span>
<span data-line=""><span style="color:#FF79C6">function</span><span style="color:#50FA7B"> App</span><span style="color:#F8F8F2">() {</span></span>
<span data-line=""><span style="color:#FF79C6">  let</span><span style="color:#F8F8F2"> currentTab </span><span style="color:#FF79C6">=</span><span style="color:#E9F284"> '</span><span style="color:#F1FA8C">first</span><span style="color:#E9F284">'</span></span>
<span data-line=""><span style="color:#FF79C6">  return</span><span style="color:#F8F8F2"> (</span></span>
<span data-line=""><span style="color:#F8F8F2">    &#x3C;></span></span>
<span data-line=""><span style="color:#FF79C6">      {</span></span>
<span data-line=""><span style="color:#F8F8F2">        currentTab </span><span style="color:#FF79C6">===</span><span style="color:#E9F284"> '</span><span style="color:#F1FA8C">first</span><span style="color:#E9F284">'</span><span style="color:#FF79C6"> ?</span></span>
<span data-line=""><span style="color:#F8F8F2">        &#x3C;</span><span style="color:#8BE9FD;font-style:italic">Profile</span><span style="color:#F8F8F2"> /></span></span>
<span data-line=""><span style="color:#FF79C6">        :</span><span style="color:#F8F8F2"> currentTab </span><span style="color:#FF79C6">===</span><span style="color:#E9F284"> '</span><span style="color:#F1FA8C">second</span><span style="color:#E9F284">'</span><span style="color:#FF79C6"> ?</span></span>
<span data-line=""><span style="color:#F8F8F2">        &#x3C;</span><span style="color:#8BE9FD;font-style:italic">Setting</span><span style="color:#F8F8F2"> /> </span><span style="color:#FF79C6">:</span><span style="color:#F8F8F2"> &#x3C;</span><span style="color:#8BE9FD;font-style:italic">Extra</span><span style="color:#F8F8F2"> /></span></span>
<span data-line=""><span style="color:#FF79C6">      }</span></span>
<span data-line=""><span style="color:#F8F8F2">    &#x3C;/</span><span style="color:#8BE9FD;font-style:italic">General</span><span style="color:#F8F8F2">></span></span>
<span data-line=""><span style="color:#F8F8F2">  )</span></span>
<span data-line=""><span style="color:#F8F8F2">}</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#6272A4">// ✅ Good</span></span>
<span data-line=""><span style="color:#FF79C6">function</span><span style="color:#50FA7B"> App</span><span style="color:#F8F8F2">() {</span></span>
<span data-line=""><span style="color:#FF79C6">  let</span><span style="color:#F8F8F2"> renderTab </span><span style="color:#FF79C6">=</span><span style="color:#F8F8F2"> {</span></span>
<span data-line=""><span style="color:#F8F8F2">    first</span><span style="color:#FF79C6">:</span><span style="color:#F8F8F2"> &#x3C;</span><span style="color:#8BE9FD;font-style:italic">Profile</span><span style="color:#F8F8F2"> />,</span></span>
<span data-line=""><span style="color:#F8F8F2">    second</span><span style="color:#FF79C6">:</span><span style="color:#F8F8F2"> &#x3C;</span><span style="color:#8BE9FD;font-style:italic">Setting</span><span style="color:#F8F8F2"> />,</span></span>
<span data-line=""><span style="color:#F8F8F2">    third</span><span style="color:#FF79C6">:</span><span style="color:#F8F8F2"> &#x3C;</span><span style="color:#8BE9FD;font-style:italic">Extra</span><span style="color:#F8F8F2"> /></span></span>
<span data-line=""><span style="color:#F8F8F2">  }</span></span>
<span data-line=""><span style="color:#FF79C6">  let</span><span style="color:#F8F8F2"> currentTab </span><span style="color:#FF79C6">=</span><span style="color:#E9F284"> '</span><span style="color:#F1FA8C">profile</span><span style="color:#E9F284">'</span></span>
<span data-line=""><span style="color:#FF79C6">  return</span><span style="color:#F8F8F2"> renderTab[currentTab]</span></span>
<span data-line=""><span style="color:#F8F8F2">}</span></span><button type="button" title="Copy code" aria-label="Copy code" data="// ❌ Bad
function App() {
  let currentTab = &#x27;first&#x27;
  return (
    <>
      {
        currentTab === &#x27;first&#x27; ?
        <Profile />
        : currentTab === &#x27;second&#x27; ?
        <Setting /> : <Extra />
      }
    </General>
  )
}

// ✅ Good
function App() {
  let renderTab = {
    first: <Profile />,
    second: <Setting />,
    third: <Extra />
  }
  let currentTab = &#x27;profile&#x27;
  return renderTab[currentTab]
}" class="rehype-pretty-copy" onclick="navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);window.setTimeout(() => this.classList.remove(&#x27;rehype-pretty-copied&#x27;), 3000);"><span class="ready"></span><span class="success"></span></button><style>:root {--copy-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 48 48'%3E%3Cpath fill='%23adadad' d='M16.187 9.5H12.25a1.75 1.75 0 0 0-1.75 1.75v28.5c0 .967.784 1.75 1.75 1.75h23.5a1.75 1.75 0 0 0 1.75-1.75v-28.5a1.75 1.75 0 0 0-1.75-1.75h-3.937a4.25 4.25 0 0 1-4.063 3h-7.5a4.25 4.25 0 0 1-4.063-3M31.813 7h3.937A4.25 4.25 0 0 1 40 11.25v28.5A4.25 4.25 0 0 1 35.75 44h-23.5A4.25 4.25 0 0 1 8 39.75v-28.5A4.25 4.25 0 0 1 12.25 7h3.937a4.25 4.25 0 0 1 4.063-3h7.5a4.25 4.25 0 0 1 4.063 3M18.5 8.25c0 .966.784 1.75 1.75 1.75h7.5a1.75 1.75 0 1 0 0-3.5h-7.5a1.75 1.75 0 0 0-1.75 1.75'/%3E%3C/svg%3E");--success-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='%2366ff85' d='M9 16.17L5.53 12.7a.996.996 0 1 0-1.41 1.41l4.18 4.18c.39.39 1.02.39 1.41 0L20.29 7.71a.996.996 0 1 0-1.41-1.41z'/%3E%3C/svg%3E");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {right: 1px;padding: 0;width: 24px;height: 24px;display: flex;margin-top: 2px;margin-right: 8px;position: absolute;border-radius: 25%;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></pre></figure>
<p>It's much better. Smart way!</p>
<h2>Type Guards in Typescript</h2>
<figure data-rehype-pretty-code-figure=""><pre style="background-color:#282A36;color:#F8F8F2" tabindex="0" data-language="ts" data-theme="dracula"><code data-language="ts" data-theme="dracula" style="display: grid;"><span data-line=""><span style="color:#FF79C6">interface</span><span style="color:#8BE9FD;font-style:italic"> Cat</span><span style="color:#F8F8F2"> {</span></span>
<span data-line=""><span style="color:#50FA7B">    meow</span><span style="color:#FF79C6">:</span><span style="color:#F8F8F2"> () </span><span style="color:#FF79C6">=></span><span style="color:#8BE9FD;font-style:italic"> void</span><span style="color:#F8F8F2">;</span></span>
<span data-line=""><span style="color:#F8F8F2">}</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#FF79C6">interface</span><span style="color:#8BE9FD;font-style:italic"> Dog</span><span style="color:#F8F8F2"> {</span></span>
<span data-line=""><span style="color:#50FA7B">    bark</span><span style="color:#FF79C6">:</span><span style="color:#F8F8F2"> () </span><span style="color:#FF79C6">=></span><span style="color:#8BE9FD;font-style:italic"> void</span><span style="color:#F8F8F2">;</span></span>
<span data-line=""><span style="color:#F8F8F2">}</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#FF79C6">function</span><span style="color:#50FA7B"> isCat</span><span style="color:#F8F8F2">(</span><span style="color:#FFB86C;font-style:italic">animal</span><span style="color:#FF79C6">:</span><span style="color:#8BE9FD;font-style:italic"> Cat</span><span style="color:#FF79C6"> |</span><span style="color:#8BE9FD;font-style:italic"> Dog</span><span style="color:#F8F8F2">)</span><span style="color:#FF79C6">:</span><span style="color:#FFB86C;font-style:italic"> </span><mark data-highlighted-chars-mark="" data-highlighted-chars="" data-chars-id="green"><span style="color:#FFB86C;font-style:italic">animal</span><span style="color:#FF79C6"> is</span><span style="color:#8BE9FD;font-style:italic"> Cat</span></mark><span style="color:#F8F8F2"> {</span></span>
<span data-line=""><span style="color:#FF79C6">    return</span><span style="color:#F8F8F2"> (animal </span><span style="color:#FF79C6">as</span><span style="color:#8BE9FD;font-style:italic"> Cat</span><span style="color:#F8F8F2">).meow </span><span style="color:#FF79C6">!==</span><span style="color:#BD93F9"> undefined</span><span style="color:#F8F8F2">;</span></span>
<span data-line=""><span style="color:#F8F8F2">}</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#FF79C6">const</span><span style="color:#F8F8F2"> animal </span><span style="color:#FF79C6">=</span><span style="color:#50FA7B"> getAnimal</span><span style="color:#F8F8F2">()</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#6272A4">// ❌ Bad</span></span>
<span data-line=""><span style="color:#FF79C6">if</span><span style="color:#F8F8F2"> (</span><span style="color:#E9F284">'</span><span style="color:#F1FA8C">meow</span><span style="color:#E9F284">'</span><span style="color:#FF79C6"> in</span><span style="color:#F8F8F2"> pet) {</span></span>
<span data-line=""><span style="color:#F8F8F2">  animal.</span><span style="color:#50FA7B">meow</span><span style="color:#F8F8F2">()</span></span>
<span data-line=""><span style="color:#F8F8F2">} </span><span style="color:#FF79C6">else</span><span style="color:#F8F8F2"> {</span></span>
<span data-line=""><span style="color:#F8F8F2">  animal.</span><span style="color:#50FA7B">bark</span><span style="color:#F8F8F2">() </span><span style="color:#6272A4">// 🔴 Error</span></span>
<span data-line=""><span style="color:#F8F8F2">}</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#6272A4">// ✅ Good</span></span>
<span data-line=""><span style="color:#FF79C6">if</span><span style="color:#F8F8F2"> (</span><span style="color:#50FA7B">isCat</span><span style="color:#F8F8F2">(animal)) {</span></span>
<span data-line=""><span style="color:#F8F8F2">  animal.</span><span style="color:#50FA7B">meow</span><span style="color:#F8F8F2">()</span></span>
<span data-line=""><span style="color:#F8F8F2">} </span><span style="color:#FF79C6">else</span><span style="color:#F8F8F2"> {</span></span>
<span data-line=""><span style="color:#F8F8F2">  animal.</span><span style="color:#50FA7B">bark</span><span style="color:#F8F8F2">()</span></span>
<span data-line=""><span style="color:#F8F8F2">}</span></span><button type="button" title="Copy code" aria-label="Copy code" data="interface Cat {
    meow: () => void;
}

interface Dog {
    bark: () => void;
}

function isCat(animal: Cat | Dog): animal is Cat {
    return (animal as Cat).meow !== undefined;
}

const animal = getAnimal()

// ❌ Bad
if (&#x27;meow&#x27; in pet) {
  animal.meow()
} else {
  animal.bark() // 🔴 Error
}

// ✅ Good
if (isCat(animal)) {
  animal.meow()
} else {
  animal.bark()
}" class="rehype-pretty-copy" onclick="navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);window.setTimeout(() => this.classList.remove(&#x27;rehype-pretty-copied&#x27;), 3000);"><span class="ready"></span><span class="success"></span></button><style>:root {--copy-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 48 48'%3E%3Cpath fill='%23adadad' d='M16.187 9.5H12.25a1.75 1.75 0 0 0-1.75 1.75v28.5c0 .967.784 1.75 1.75 1.75h23.5a1.75 1.75 0 0 0 1.75-1.75v-28.5a1.75 1.75 0 0 0-1.75-1.75h-3.937a4.25 4.25 0 0 1-4.063 3h-7.5a4.25 4.25 0 0 1-4.063-3M31.813 7h3.937A4.25 4.25 0 0 1 40 11.25v28.5A4.25 4.25 0 0 1 35.75 44h-23.5A4.25 4.25 0 0 1 8 39.75v-28.5A4.25 4.25 0 0 1 12.25 7h3.937a4.25 4.25 0 0 1 4.063-3h7.5a4.25 4.25 0 0 1 4.063 3M18.5 8.25c0 .966.784 1.75 1.75 1.75h7.5a1.75 1.75 0 1 0 0-3.5h-7.5a1.75 1.75 0 0 0-1.75 1.75'/%3E%3C/svg%3E");--success-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='%2366ff85' d='M9 16.17L5.53 12.7a.996.996 0 1 0-1.41 1.41l4.18 4.18c.39.39 1.02.39 1.41 0L20.29 7.71a.996.996 0 1 0-1.41-1.41z'/%3E%3C/svg%3E");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {right: 1px;padding: 0;width: 24px;height: 24px;display: flex;margin-top: 2px;margin-right: 8px;position: absolute;border-radius: 25%;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></pre></figure>
<p>You only need to check once and typescript will know which type this animal is in the context. So you need multiple checks.</p>
<h2>Use satisfies</h2>
<figure data-rehype-pretty-code-figure=""><pre style="background-color:#282A36;color:#F8F8F2" tabindex="0" data-language="ts" data-theme="dracula"><code data-language="ts" data-theme="dracula" style="display: grid;"><span data-line=""><span style="color:#FF79C6">interface</span><span style="color:#8BE9FD;font-style:italic"> User</span><span style="color:#F8F8F2"> {</span></span>
<span data-line=""><span style="color:#F8F8F2">    lastName</span><span style="color:#FF79C6">:</span><span style="color:#8BE9FD;font-style:italic"> string</span><span style="color:#F8F8F2">;</span></span>
<span data-line=""><span style="color:#F8F8F2">    age</span><span style="color:#FF79C6">:</span><span style="color:#8BE9FD;font-style:italic"> number</span><span style="color:#F8F8F2">;</span></span>
<span data-line=""><span style="color:#F8F8F2">}</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#FF79C6">type</span><span style="color:#8BE9FD;font-style:italic"> ID</span><span style="color:#FF79C6"> =</span><span style="color:#8BE9FD;font-style:italic"> string</span><span style="color:#F8F8F2">;</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#FF79C6">type</span><span style="color:#8BE9FD;font-style:italic"> Database</span><span style="color:#FF79C6"> =</span><span style="color:#8BE9FD;font-style:italic"> Record</span><span style="color:#F8F8F2">&#x3C;</span><span style="color:#8BE9FD;font-style:italic">string</span><span style="color:#F8F8F2">, </span><span style="color:#FFB86C;font-style:italic">User</span><span style="color:#FF79C6"> |</span><span style="color:#FFB86C;font-style:italic"> ID</span><span style="color:#F8F8F2">>;</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#6272A4">// ❌ Bad</span></span>
<span data-line=""><span style="color:#FF79C6">const</span><span style="color:#F8F8F2"> myData</span><span style="color:#FF79C6">:</span><span style="color:#8BE9FD;font-style:italic"> Database</span><span style="color:#FF79C6"> =</span><span style="color:#F8F8F2"> {</span></span>
<span data-line=""><span style="color:#F8F8F2">    ryan</span><span style="color:#FF79C6">:</span><span style="color:#E9F284"> '</span><span style="color:#F1FA8C">ID12345</span><span style="color:#E9F284">'</span><span style="color:#F8F8F2">,</span></span>
<span data-line=""><span style="color:#F8F8F2">    joe</span><span style="color:#FF79C6">:</span><span style="color:#F8F8F2"> {</span></span>
<span data-line=""><span style="color:#F8F8F2">        lastName</span><span style="color:#FF79C6">:</span><span style="color:#E9F284"> '</span><span style="color:#F1FA8C">kobe</span><span style="color:#E9F284">'</span><span style="color:#F8F8F2">,</span></span>
<span data-line=""><span style="color:#F8F8F2">        age</span><span style="color:#FF79C6">:</span><span style="color:#BD93F9"> 39</span></span>
<span data-line=""><span style="color:#F8F8F2">    }</span></span>
<span data-line=""><span style="color:#F8F8F2">}</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#6272A4">// 🔴 Error: Property 'toLowerCase' does not exist on type 'string | User'.</span></span>
<span data-line=""><span style="color:#F8F8F2">myData.ryan.</span><span style="color:#50FA7B">toLowerCase</span><span style="color:#F8F8F2">()</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#6272A4">// ✅ Good</span></span>
<span data-line=""><span style="color:#FF79C6">const</span><span style="color:#F8F8F2"> myData </span><span style="color:#FF79C6">=</span><span style="color:#F8F8F2"> {</span></span>
<span data-line=""><span style="color:#F8F8F2">    ryan</span><span style="color:#FF79C6">:</span><span style="color:#E9F284"> '</span><span style="color:#F1FA8C">ID12345</span><span style="color:#E9F284">'</span><span style="color:#F8F8F2">,</span></span>
<span data-line=""><span style="color:#F8F8F2">    joe</span><span style="color:#FF79C6">:</span><span style="color:#F8F8F2"> {</span></span>
<span data-line=""><span style="color:#F8F8F2">        lastName</span><span style="color:#FF79C6">:</span><span style="color:#E9F284"> '</span><span style="color:#F1FA8C">kobe</span><span style="color:#E9F284">'</span><span style="color:#F8F8F2">,</span></span>
<span data-line=""><span style="color:#F8F8F2">        age</span><span style="color:#FF79C6">:</span><span style="color:#BD93F9"> 39</span></span>
<span data-line=""><span style="color:#F8F8F2">    }</span></span>
<span data-line=""><span style="color:#F8F8F2">} </span><span style="color:#FF79C6">satisfies</span><span style="color:#8BE9FD;font-style:italic"> Database</span></span>
<span data-line=""> </span>
<span data-line="" data-highlighted-line=""><span style="color:#F8F8F2">myData.ryan.</span><span style="color:#50FA7B">toLowerCase</span><span style="color:#F8F8F2">() </span><span style="color:#6272A4">// id12345</span></span><button type="button" title="Copy code" aria-label="Copy code" data="interface User {
    lastName: string;
    age: number;
}

type ID = string;

type Database = Record<string, User | ID>;

// ❌ Bad
const myData: Database = {
    ryan: &#x27;ID12345&#x27;,
    joe: {
        lastName: &#x27;kobe&#x27;,
        age: 39
    }
}

// 🔴 Error: Property &#x27;toLowerCase&#x27; does not exist on type &#x27;string | User&#x27;.
myData.ryan.toLowerCase()

// ✅ Good
const myData = {
    ryan: &#x27;ID12345&#x27;,
    joe: {
        lastName: &#x27;kobe&#x27;,
        age: 39
    }
} satisfies Database

myData.ryan.toLowerCase() // id12345" class="rehype-pretty-copy" onclick="navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);window.setTimeout(() => this.classList.remove(&#x27;rehype-pretty-copied&#x27;), 3000);"><span class="ready"></span><span class="success"></span></button><style>:root {--copy-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 48 48'%3E%3Cpath fill='%23adadad' d='M16.187 9.5H12.25a1.75 1.75 0 0 0-1.75 1.75v28.5c0 .967.784 1.75 1.75 1.75h23.5a1.75 1.75 0 0 0 1.75-1.75v-28.5a1.75 1.75 0 0 0-1.75-1.75h-3.937a4.25 4.25 0 0 1-4.063 3h-7.5a4.25 4.25 0 0 1-4.063-3M31.813 7h3.937A4.25 4.25 0 0 1 40 11.25v28.5A4.25 4.25 0 0 1 35.75 44h-23.5A4.25 4.25 0 0 1 8 39.75v-28.5A4.25 4.25 0 0 1 12.25 7h3.937a4.25 4.25 0 0 1 4.063-3h7.5a4.25 4.25 0 0 1 4.063 3M18.5 8.25c0 .966.784 1.75 1.75 1.75h7.5a1.75 1.75 0 1 0 0-3.5h-7.5a1.75 1.75 0 0 0-1.75 1.75'/%3E%3C/svg%3E");--success-icon: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='%2366ff85' d='M9 16.17L5.53 12.7a.996.996 0 1 0-1.41 1.41l4.18 4.18c.39.39 1.02.39 1.41 0L20.29 7.71a.996.996 0 1 0-1.41-1.41z'/%3E%3C/svg%3E");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {right: 1px;padding: 0;width: 24px;height: 24px;display: flex;margin-top: 2px;margin-right: 8px;position: absolute;border-radius: 25%;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></pre></figure>
<p><code>Satisfies</code> is possibile to use in TypeScript 4.9. Keep that in mind.</p>
<h2>Wrap Up</h2>
<p>I hope the things I shared with should be helpful for other people.
If I have something I want to share, I will continue in this article.</p>2:[["$","$Le",null,{"children":[["$","$Lb",null,{"order":2,"fw":900,"size":"h1","children":"Avoid Anti-Patterns"}],["$","$Lc",null,{"size":"sm","c":"dimmed","children":"Thu, Aug 15,  2024"}]]}],["$","$Lf",null,{"className":"markdown","children":["$","div",null,{"className":"markdown","dangerouslySetInnerHTML":{"__html":"$10"}}]}],["$","$L11",null,{}]]
